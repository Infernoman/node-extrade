var https = require('https');
var crypto = require('crypto');
var querystring = require('querystring');
var utf8 = require('utf8');

function extrade (config,url){
    this.config = config;
    this.url = url;
}

extrade.prototype.connect = function (endpoint,args,method,callback,aux) {
    if (!args)
        var args = {};

    var post_headers = {};

    if (method == 'POST' && aux) {
        var nonce = new Date().getTime();
        var api_key = this.config.apiKey;
        var api_secret = this.config.apiSecret;

        args['apikey'] = api_key;
        args['nonce'] = nonce;
    } else if (method == 'POST') {
        var nonce = new Date().getTime();
        var api_key = this.config.apiKey;
        var api_secret = this.config.apiSecret;

        args['api_key'] = api_key;
        args['nonce'] = nonce;
        args['signature'] = crypto.createHmac('SHA256',api_secret).update(new Buffer(JSON.stringify(args)).toString('base64')).digest('hex');
    }

    var args_string = JSON.stringify(args);
    var args_string2 = querystring.stringify(args);
    var path = '/api/' + endpoint + ((method == 'POST') ? '' : '?'+args_string2);
    var path2 = '/api/' + endpoint + '?' + args_string2;

    var post_headers = {
        'Content-Type': 'application/json',
        'Content-Length':  args_string.length
    };

    if (aux) {
        post_headers['apisign'] = crypto.createHmac('SHA512', this.url+path2, api_secret).digest('hex');
    }

    var options = {
        hostname: this.url,
        port: 443,
        path: (aux ? path2 : path),
        method: (method ? method : 'GET'),
        headers: post_headers
    };

    var req = https.request(options, function(result) {
        console.log(result)
        result.setEncoding('utf8');

        var data = '';
        result.on('data', function(response) {
            console.log(response);
            data += response;
        });

        result.on('end', function() {
            console.log(data)
            if (!data || data.search('<') >= 0) {
                callback('Couldn\'t connect to exchange.');
                return false;
            }

            try {
                var parsed = JSON.parse(data);
            } catch (e) {
                callback('Invalid JSON received from exchange.');
                return false;
            }

            var errors = (typeof parsed.errors != 'undefined') ? parsed.errors : null;
            callback(errors,parsed);
        });
    });

    req.on('error', function(e) {
        callback(e);
     });

    req.write(args_string);
    req.end();
}

module.exports = extrade;
